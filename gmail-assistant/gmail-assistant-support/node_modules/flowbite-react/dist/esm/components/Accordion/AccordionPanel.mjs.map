{"version":3,"file":"AccordionPanel.mjs","sources":["../../../../src/components/Accordion/AccordionPanel.tsx"],"sourcesContent":["\"use client\";\n\nimport type { FC } from \"react\";\nimport { useState } from \"react\";\nimport type { AccordionProps } from \"./Accordion\";\nimport { AccordionPanelContext } from \"./AccordionPanelContext\";\n\nexport interface AccordionPanelProps extends AccordionProps {\n  isOpen?: boolean;\n  setOpen?: () => void;\n}\n\nexport const AccordionPanel: FC<AccordionPanelProps> = ({ children, ...props }) => {\n  const { alwaysOpen } = props;\n  const [isOpen, setOpen] = useState(props.isOpen);\n\n  const provider = alwaysOpen\n    ? {\n        ...props,\n        isOpen,\n        setOpen: () => setOpen(!isOpen),\n      }\n    : props;\n\n  return <AccordionPanelContext.Provider value={provider}>{children}</AccordionPanelContext.Provider>;\n};\n"],"names":[],"mappings":";;;;AAKY,MAAC,cAAc,GAAG,CAAC,EAAE,QAAQ,EAAE,GAAG,KAAK,EAAE,KAAK;AAC1D,EAAE,MAAM,EAAE,UAAU,EAAE,GAAG,KAAK,CAAC;AAC/B,EAAE,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;AACnD,EAAE,MAAM,QAAQ,GAAG,UAAU,GAAG;AAChC,IAAI,GAAG,KAAK;AACZ,IAAI,MAAM;AACV,IAAI,OAAO,EAAE,MAAM,OAAO,CAAC,CAAC,MAAM,CAAC;AACnC,GAAG,GAAG,KAAK,CAAC;AACZ,EAAE,uBAAuB,GAAG,CAAC,qBAAqB,CAAC,QAAQ,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC;AAC5F;;;;"}