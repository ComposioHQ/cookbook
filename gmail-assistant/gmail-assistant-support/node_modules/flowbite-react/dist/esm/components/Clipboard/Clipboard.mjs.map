{"version":3,"file":"Clipboard.mjs","sources":["../../../../src/components/Clipboard/Clipboard.tsx"],"sourcesContent":["\"use client\";\n\nimport { forwardRef, useState, type ComponentProps, type ReactNode } from \"react\";\nimport { twMerge } from \"tailwind-merge\";\nimport { mergeDeep } from \"../../helpers/merge-deep\";\nimport { getTheme } from \"../../theme-store\";\nimport type { DeepPartial } from \"../../types\";\nimport { Tooltip } from \"../Tooltip\";\nimport { ClipboardWithIcon } from \"./ClipboardWithIcon\";\nimport type { FlowbiteClipboardWithIconTheme } from \"./ClipboardWithIcon\";\nimport { ClipboardWithIconText } from \"./ClipboardWithIconText\";\nimport type { FlowbiteClipboardWithIconTextTheme } from \"./ClipboardWithIconText\";\nimport { copyToClipboard } from \"./helpers\";\n\nexport interface FlowbiteClipboardTheme {\n  button: {\n    base: string;\n    label: string;\n  };\n  withIcon: FlowbiteClipboardWithIconTheme;\n  withIconText: FlowbiteClipboardWithIconTextTheme;\n}\n\nexport interface ClipboardProps extends ComponentProps<\"button\"> {\n  valueToCopy: string;\n  label?: ReactNode;\n  theme?: DeepPartial<FlowbiteClipboardTheme>;\n}\n\nconst ClipboardComponent = forwardRef<HTMLButtonElement, ClipboardProps>(\n  ({ className, valueToCopy, label, theme: customTheme = {}, ...rest }, ref) => {\n    const [isJustCopied, setIsJustCopied] = useState(false);\n\n    const theme = mergeDeep(getTheme().clipboard.button, customTheme);\n\n    return (\n      <Tooltip content={isJustCopied ? \"Copied\" : \"Copy to clipboard\"} className=\"[&_*]:cursor-pointer\">\n        <button\n          className={twMerge(theme.base, className)}\n          onClick={() => copyToClipboard(valueToCopy, setIsJustCopied)}\n          {...rest}\n          ref={ref}\n        >\n          <span className={theme.label}>{label}</span>\n        </button>\n      </Tooltip>\n    );\n  },\n);\n\nClipboardComponent.displayName = \"Clipboard\";\nClipboardWithIcon.displayName = \"Clipboard.WithIcon\";\nClipboardWithIconText.displayName = \"Clipboard.WithIconText\";\n\nexport const Clipboard = Object.assign(ClipboardComponent, {\n  WithIcon: ClipboardWithIcon,\n  WithIconText: ClipboardWithIconText,\n});\n"],"names":[],"mappings":";;;;;;;;;;AAWA,MAAM,kBAAkB,GAAG,UAAU;AACrC,EAAE,CAAC,EAAE,SAAS,EAAE,WAAW,EAAE,KAAK,EAAE,KAAK,EAAE,WAAW,GAAG,EAAE,EAAE,GAAG,IAAI,EAAE,EAAE,GAAG,KAAK;AAChF,IAAI,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;AAC5D,IAAI,MAAM,KAAK,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;AACtE,IAAI,uBAAuB,GAAG,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,YAAY,GAAG,QAAQ,GAAG,mBAAmB,EAAE,SAAS,EAAE,sBAAsB,EAAE,QAAQ,kBAAkB,GAAG;AAClK,MAAM,QAAQ;AACd,MAAM;AACN,QAAQ,SAAS,EAAE,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC;AACjD,QAAQ,OAAO,EAAE,MAAM,eAAe,CAAC,WAAW,EAAE,eAAe,CAAC;AACpE,QAAQ,GAAG,IAAI;AACf,QAAQ,GAAG;AACX,QAAQ,QAAQ,kBAAkB,GAAG,CAAC,MAAM,EAAE,EAAE,SAAS,EAAE,KAAK,CAAC,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC;AAC1F,OAAO;AACP,KAAK,EAAE,CAAC,CAAC;AACT,GAAG;AACH,CAAC,CAAC;AACF,kBAAkB,CAAC,WAAW,GAAG,WAAW,CAAC;AAC7C,iBAAiB,CAAC,WAAW,GAAG,oBAAoB,CAAC;AACrD,qBAAqB,CAAC,WAAW,GAAG,wBAAwB,CAAC;AACjD,MAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,kBAAkB,EAAE;AAC3D,EAAE,QAAQ,EAAE,iBAAiB;AAC7B,EAAE,YAAY,EAAE,qBAAqB;AACrC,CAAC;;;;"}